import { NextRequest, NextResponse } from 'next/server'

// POST /api/telegram-bot - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('Bot received update:', JSON.stringify(body, null, 2))
    
    const { message, callback_query } = body

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message) {
      const { text, from, chat } = message
      console.log('Processing message:', { text, fromId: from.id, chatId: chat.id })
      
      if (text?.startsWith('/start')) {
        const args = text.split(' ')
        console.log('Start command args:', args)
        
        if (args.length > 1 && args[1].startsWith('pay_')) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start pay_uuid
          const paymentRequestId = args[1].replace('pay_', '')
          console.log('Processing payment request:', paymentRequestId)
          return await handlePaymentRequest(paymentRequestId, from.id, chat.id)
        } else {
          // –û–±—ã—á–Ω—ã–π /start
          console.log('Regular start command')
          await sendMessage(chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stellex Bank! üè¶\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.')
          return NextResponse.json({ ok: true })
        }
      }
      
      if (text === '/balance') {
        await sendMessage(chat.id, '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.')
        return NextResponse.json({ ok: true })
      }
      
      if (text === '/help') {
        await sendMessage(chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n/help - –ü–æ–º–æ—â—å')
        return NextResponse.json({ ok: true })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
    if (callback_query) {
      const { data, from, message } = callback_query
      
      if (data?.startsWith('pay_')) {
        const paymentRequestId = data.replace('pay_', '')
        await handlePaymentRequest(paymentRequestId, from.id, message.chat.id)
        return NextResponse.json({ ok: true })
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('Bot handler error:', error)
    return NextResponse.json({ ok: true })
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async function handlePaymentRequest(paymentRequestId: string, userId: number, chatId: number) {
  try {
    console.log('Fetching payment request:', paymentRequestId)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://tgwallet-ei8z.vercel.app'
    const response = await fetch(`${appUrl}/api/payment-request/${paymentRequestId}`)
    const data = await response.json()
    
    console.log('Payment request response:', { status: response.status, data })

    if (!response.ok || data.error) {
      console.error('Payment request fetch failed:', data)
      await sendMessage(chatId, '‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.')
      return
    }

    const paymentRequest = data

    if (paymentRequest.status !== 'pending') {
      await sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.')
      return
    }

    console.log('Creating invoice for payment request:', paymentRequest)

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const invoice = {
      chat_id: chatId,
      title: `Stellex: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ`,
      description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${paymentRequest.amount_stars} ‚≠ê`,
      payload: JSON.stringify({
        payment_request_id: paymentRequestId,
        user_id: userId,
        amount_rub: paymentRequest.amount_rub,
        amount_stars: paymentRequest.amount_stars
      }),
      provider_token: '', // –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω provider token
      currency: 'XTR', // Telegram Stars currency
      prices: [
        {
          label: 'XTR', // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å XTR
          amount: paymentRequest.amount_stars * 100 // Telegram Stars –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }
      ],
      start_parameter: `pay_${paymentRequestId}`,
      is_flexible: false,
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false
    }

    console.log('Sending invoice:', invoice)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    const invoiceResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendInvoice`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invoice)
    })

    const result = await invoiceResponse.json()
    
    if (result.ok) {
      console.log('Invoice sent successfully:', result.result.message_id)
      console.log('Invoice link:', result.result.invoice_link)
    } else {
      console.error('Failed to send invoice:', result)
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
  } catch (error) {
    console.error('Payment request error:', error)
    await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId: number, text: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      })
    })
    
    return await response.json()
  } catch (error) {
    console.error('Send message error:', error)
    return { ok: false }
  }
}

export async function GET() {
  return NextResponse.json({ ok: true })
}
